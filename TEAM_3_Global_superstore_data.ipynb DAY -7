{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0S41Ky4tRhTc"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sqlite3\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/plotly/datasets/master/supermarket_Sales.csv\"\n",
        "df = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "oG4SySV-RkMk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Columns in dataset:\", df.columns.tolist())\n",
        "\n",
        "# Convert 'Date' to datetime\n",
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "\n",
        "# Feature Engineering: Year, Month\n",
        "df['Year'] = df['Date'].dt.year\n",
        "df['Month'] = df['Date'].dt.month\n",
        "\n",
        "# Categorize 'Total' sales into bins\n",
        "df['Sales_Level'] = pd.qcut(df['Total'], q=3, labels=[\"Low\", \"Medium\", \"High\"])\n",
        "\n",
        "# Create a mock 'Order Date' by subtracting 1–6 days from 'Date'\n",
        "np.random.seed(42)\n",
        "df['Order Date'] = df['Date'] - pd.to_timedelta(np.random.randint(1, 7, size=len(df)), unit='d')\n",
        "\n",
        "# Calculate Order Processing Time\n",
        "df['OrderProcessingTime'] = (df['Date'] - df['Order Date']).dt.days\n",
        "\n",
        "# Drop rows with any missing values (if any)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# Show sample output\n",
        "print(df[['Date', 'Order Date', 'OrderProcessingTime', 'Sales_Level']].head())\n",
        "print(df.columns)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k9-y2peHRnuT",
        "outputId": "86d8328f-31d3-408c-cfd2-c4a7b333a9df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns in dataset: ['Invoice ID', 'Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Unit price', 'Quantity', 'Tax 5%', 'Total', 'Date', 'Time', 'Payment', 'Cost of goods sold', 'Gross margin percentage', 'Gross income', 'Customer stratification rating', 'Year', 'Month', 'Sales_Level', 'Order Date', 'OrderProcessingTime']\n",
            "        Date Order Date  OrderProcessingTime Sales_Level\n",
            "0 2019-01-05 2019-01-01                    4        High\n",
            "1 2019-03-08 2019-03-03                    5         Low\n",
            "2 2019-03-03 2019-02-28                    3      Medium\n",
            "3 2019-01-27 2019-01-22                    5        High\n",
            "4 2019-02-08 2019-02-03                    5        High\n",
            "Index(['Invoice ID', 'Branch', 'City', 'Customer type', 'Gender',\n",
            "       'Product line', 'Unit price', 'Quantity', 'Tax 5%', 'Total', 'Date',\n",
            "       'Time', 'Payment', 'Cost of goods sold', 'Gross margin percentage',\n",
            "       'Gross income', 'Customer stratification rating', 'Year', 'Month',\n",
            "       'Sales_Level', 'Order Date', 'OrderProcessingTime'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conn = sqlite3.connect(\":memory:\")\n",
        "df.to_sql(\"sales_data\", conn, index=False, if_exists='replace')\n",
        "\n",
        "# 1. Top 5 Products by City and Sales\n",
        "print(\"\\nTop 5 Products by City and Sales:\\n\")\n",
        "query1 = pd.read_sql_query(\"\"\"\n",
        "    SELECT City, `Product line`, SUM(Total) AS Total_Sales\n",
        "    FROM sales_data\n",
        "    GROUP BY City, `Product line`\n",
        "    ORDER BY Total_Sales DESC\n",
        "\"\"\", conn)\n",
        "print(query1.head(5))\n",
        "\n",
        "# 2. Average Processing Time by Customer Type\n",
        "print(\"\\nAverage Processing Time by Customer Type:\\n\")\n",
        "query2 = pd.read_sql_query(\"\"\"\n",
        "    SELECT `Customer type`, AVG(OrderProcessingTime) AS Avg_Processing_Time\n",
        "    FROM sales_data\n",
        "    GROUP BY `Customer type`\n",
        "\"\"\", conn)\n",
        "print(query2)\n",
        "\n",
        "# 3. Top 5 Invoices by Spending (fixing the Customer name issue)\n",
        "print(\"\\nTop 5 Invoices by Spending:\\n\")\n",
        "query3 = pd.read_sql_query(\"\"\"\n",
        "    SELECT `Invoice ID`, SUM(Total) AS Total_Spent\n",
        "    FROM sales_data\n",
        "    GROUP BY `Invoice ID`\n",
        "    ORDER BY Total_Spent DESC\n",
        "    LIMIT 5\n",
        "\"\"\", conn)\n",
        "print(query3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EOb4Ys6_SSAV",
        "outputId": "70b200f6-cc21-4fde-bb1a-78fc69ef0ae9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 5 Products by City and Sales:\n",
            "\n",
            "        City         Product line  Total_Sales\n",
            "0  Naypyitaw   Food and beverages   23766.8550\n",
            "1     Yangon   Home and lifestyle   22417.1955\n",
            "2  Naypyitaw  Fashion accessories   21560.0700\n",
            "3   Mandalay    Sports and travel   19988.1990\n",
            "4   Mandalay    Health and beauty   19980.6600\n",
            "\n",
            "Average Processing Time by Customer Type:\n",
            "\n",
            "  Customer type  Avg_Processing_Time\n",
            "0        Member             3.524950\n",
            "1        Normal             3.388778\n",
            "\n",
            "Top 5 Invoices by Spending:\n",
            "\n",
            "    Invoice ID  Total_Spent\n",
            "0  860-79-0874      1042.65\n",
            "1  687-47-8271      1039.29\n",
            "2  283-26-5248      1034.46\n",
            "3  751-41-9720      1023.75\n",
            "4  303-96-2227      1022.49\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Quantity', 'Unit price', 'Tax 5%', 'OrderProcessingTime']\n",
        "X = df[features]\n",
        "y = df['Total']\n",
        "\n",
        "# Split data (80/20)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train Linear Regression model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"\\n--- Model Evaluation ---\")\n",
        "print(f\"Mean Squared Error: {mse:.2f}\")\n",
        "print(f\"R² Score: {r2:.2f}\")\n",
        "\n",
        "# Show a few predictions\n",
        "comparison = pd.DataFrame({'Actual': y_test.values[:5], 'Predicted': y_pred[:5]})\n",
        "print(\"\\nSample Predictions:\\n\", comparison)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2r3QN1qWTYlR",
        "outputId": "e5cfb0e5-b761-4688-809c-35e259c66c8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Model Evaluation ---\n",
            "Mean Squared Error: 0.00\n",
            "R² Score: 1.00\n",
            "\n",
            "Sample Predictions:\n",
            "      Actual  Predicted\n",
            "0  523.9710   523.9710\n",
            "1  616.9800   616.9800\n",
            "2  408.7335   408.7335\n",
            "3  135.3555   135.3555\n",
            "4   45.9270    45.9270\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ---------------------\n",
        "# Histogram of Prediction Errors\n",
        "# ---------------------\n",
        "errors = y_test - y_pred\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.hist(errors, bins=30, edgecolor='black')\n",
        "plt.title('Distribution of Prediction Errors')\n",
        "plt.xlabel('Error (Actual - Predicted)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "print(\"\\nSample Predictions:\\n\", comparison)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "mh9L0Hb4TtqL",
        "outputId": "6fa426e9-349f-41c2-b66d-67206869aac2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Sample Predictions:\n",
            "      Actual  Predicted\n",
            "0  523.9710   523.9710\n",
            "1  616.9800   616.9800\n",
            "2  408.7335   408.7335\n",
            "3  135.3555   135.3555\n",
            "4   45.9270    45.9270\n"
          ]
        }
      ]
    }
  ]
}